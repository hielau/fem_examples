
$ slip = 0
$ torqsf = 0.64
$ voltagesf = 2
$ currentsf = 2
$ f = 50	! [Hz] electrical frequency
$ U = 400	! [V] rated voltage
$ pp = 2	!number of polepairs
$ l = 0.16	! [m] stator stack length
$ Rs = 0.4483	! [Ohm] stator phase resistance
$ Rcom = 0.4483	! Resistance of each component
$ a = 2		! parallel paths
$ Lew1 = 0.00171044	! [H] end winding phase1 inductance
$ Lew2 = 0.00171044	! [H] end winding phase2 inductance
$ Lew3 = 0.00171044	! [H] end winding phase3 inductance
$ R_b2b = 5.54731E-07	! [Ohm] bar - 2 - bar end ring rotor resistance
$ L_b2b = 1.79E-08	! [H] bar - 2 - bar end ring rotor inductance
$ Nph = 128	!Number of phase turns
$ w_m = f/pp*2*pi	! [rad / s] mech frequency
$ rotorTemp = 100	!Rotor tempeture [°C]
$ statorTemp = 80	!Stator winding temperature [°C]

$ Circuits = 2

$ res_dir = "results"
$ res_dir_vtu = "results/vtu"
$ res_file_vtu = "case2"
$ res_file_dat = "case2.dat"
$ res_file_fourierloss = "results/fourierloss002.dat"

$ alpha_al = 0.0039
$ alpha_cu = 0.00404

Header
  Mesh DB "mesh"
  Results Directory $ res_dir
  Include Path "materials"
End

Simulation
  Max Output Level = 3
  Coordinate System = Cartesian 2D

  Circuit Model Depth = Real $ l
  Steady State Max Iterations = 1
  Simulation Type = Transient
  Timestepping Method = BDF
  BDF Order = 1

  Output Intervals = 0
  
  Rotor Radius = Real 0.06225

  Timestep Sizes = $ 1e-3
  Timestep Intervals = $ 400

  Use Mesh Names = Logical True
End

Constants
  Permittivity of Vacuum = 8.85418781e-12
  Permeability of Vacuum = 1.25663706e-6
End

!-------- Materials ---------
!Air
Material 1
  Relative Permeability = Real 1.0
  Electric Conductivity = Real 0.0
  Relative Permittivity = Real 1.0
End

!lamination steel
Material 2
  include m350-50a_20c.pmf
  Harmonic Loss Coefficient 1 = Real 159.9615
  Harmonic Loss Coefficient 2 = Real 0.934621628891
End

!Aluminum
Material 3
  Relative Permeability = Real 1.0
  Electric Conductivity = Real $ 36e6/(1+alpha_al*(rotorTemp-20))
  Relative Permittivity = Real 1.0
End

!Copper stator
Material 4
  Relative Permeability = Real 1.0
  Electric Conductivity = Real $ 58e6/(1+alpha_cu*(statorTemp-20))
  Relative Permittivity = Real 1.0
End

!Shaft steel
Material 5
  Relative Permeability = Real 1200.0
  Electric Conductivity = Real 0.0
  Relative Permittivity = Real 1.0
End

!-------- Body ---------
Body 1
  Name = StCore
  !Equation = 1
  Equation = 2
  Material = 2
End

Body 2
  Name = RtCore
  !Equation = 1
  Equation = 2
  Material = 2
  Body Force = 2
End

Body 3
  Name = Shaft
  Equation = 1
  Material = 5
  Body Force = 2
End

Body 4
  Name = AirgapSt
  Equation = 1
  Material = 1
End

Body 5
  Name = AirgapRt
  Equation = 1
  Material = 1
  Body Force = 2
End

Body 6
  Name = Air
  Equation = 1
  Material = 1
End

Body 7
  Name = U_pos
  Equation = 1
  Material = 4
End

Body 8
  Name = V_pos
  Equation = 1
  Material = 4
End

Body 9
  Name = W_neg
  Equation = 1
  Material = 4
End

Body 10
  Name = Bar1
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 11
  Name = Bar2
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 12
  Name = Bar3
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 13
  Name = Bar4
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 14
  Name = Bar5
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 15
  Name = Bar6
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 16
  Name = Bar7
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 17
  Name = Bar8
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 18
  Name = Bar9
  Equation = 1
  Material = 3
  Body Force = 2
End

Body 19
  Name = Bar10
  Equation = 1
  Material = 3
  Body Force = 2
End

!-------- Components ---------
Component 1
  Name = "Rotating_Domains"
  Master Bodies(12) = 2 3 10 11 12 13 14 15 16 17 18 19 
  Calculate Magnetic Torque = true
End

Component 2
  Name = String Uplus
  Body = Integer 7
  Coil Type = String Stranded
  Number of Turns = Real $ Nph
  Resistance = Real $ Rcom
End

Component 3
  Name = String Vplus
  Body = Integer 8
  Coil Type = String Stranded
  Number of Turns = Real $ Nph
  Resistance = Real $ Rcom
End

Component 4
  Name = String Wminus
  Body = Integer 9
  Coil Type = String Stranded
  Number of Turns = Real $ Nph
  Resistance = Real $ Rcom
End

Component 5
  Name = String RB1
  Body = Integer 10
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 6
  Name = String RB2
  Body = Integer 11
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 7
  Name = String RB3
  Body = Integer 12
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 8
  Name = String RB4
  Body = Integer 13
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 9
  Name = String RB5
  Body = Integer 14
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 10
  Name = String RB6
  Body = Integer 15
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 11
  Name = String RB7
  Body = Integer 16
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 12
  Name = String RB8
  Body = Integer 17
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 13
  Name = String RB9
  Body = Integer 18
  Coil Type = String massive
  Number of Turns = Real 1
End

Component 14
  Name = String RB10
  Body = Integer 19
  Coil Type = String massive
  Number of Turns = Real 1
End

!------ Circuits ---------
include "Winding.definition"
include "rotor_cage.definition"

!-------- Body Force ---------
Body Force 1
  Name = "Circuit"

  U_u = Variable time
    Real MATC "U/voltagesf*sqrt(2)/sqrt(3)*sin(tx(0)*2*pi*f)"

  U_v = Variable time
    Real MATC "U/voltagesf*sqrt(2)/sqrt(3)*sin(tx(0)*2*pi*f-2*pi/3)"

  U_w = Variable time
    Real MATC "U/voltagesf*sqrt(2)/sqrt(3)*sin(tx(0)*2*pi*f+2*pi/3)"
End

Body Force 2
  Mesh Rotate 3 = Variable time
    Real MATC "180/pi*w_m*(1-slip)*tx(0)"
End

!-------- Solvers ---------
Equation 1 :: Active Solvers(3) = 2 3 4
Equation 2 :: Active Solvers(4) = 2 3 4 8

Solver 1
  Exec Solver = Before timestep
  Equation = MeshDeform
  Procedure = "RigidMeshMapper" "RigidMeshMapper"
End

Solver 2
  Exec Solver = Always
  Equation = Circuits
  Variable = W
  Procedure = "CircuitsAndDynamics" "CircuitsAndDynamics"
  No Matrix = Logical True
End

Solver 3
  Exec Solver = Always
  Equation = MgDyn2D
  Variable = A
  Procedure = "MagnetoDynamics2D" "MagnetoDynamics2D"
  Stabilize = False
  Partition Local Constraints = Logical True
  Apply Mortar BCs = Logical True
  Mortar BCs Additive = Logical True
  Steady State Convergence Tolerance = 1e-05

  Nonlinear System Compute Change in Scaled System = Logical True
  Nonlinear System Convergence Tolerance = 1e-5
  Nonlinear System Convergence Measure = Residual
  Nonlinear System Max Iterations = 20
  Nonlinear System Min Iterations = 1
  Nonlinear System Relaxation Factor = 1.0
  Nonlinear System Newton After Iterations = 3

  Newton - Raphson Iteration = Logical True
  Export Lagrange Multiplier = Logical True

  Linear System Solver = Direct
  Linear System Direct Method = umfpack
End

Solver 4
  Exec Solver = Always
  Equation = CalcFields
  Potential Variable = A
  Procedure = "MagnetoDynamics" "MagnetoDynamicsCalcFields"
  Calculate Nodal Forces = Logical True
  Calculate Magnetic Torque = Logical True
  Calculate Current Density = Logical True
  Calculate Electric Field = Logical True
  Calculate Magnetic Field Strength = Logical True
  Calculate Magnetic Vector Potential = Logical True
  Calculate Joule Heating = Logical True

  Linear System Solver = Direct
  Linear System Direct Method = umfpack
End

Solver 5
  Exec Solver = Always
  Equation = CircuitsOutput
  Procedure = "CircuitsAndDynamics" "CircuitsOutput"
End

Solver 6
  Exec Solver = After saving
  Equation = "ResultOutput"
  Procedure = "ResultOutputSolve" "ResultOutputSolver"
  Output File Name = $ res_file_vtu
  Output Directory = $ res_dir_vtu
  Save Geometry Ids = Logical True
  Vtu Format = Logical True
  Vtu Time Collection = Logical True
  Discontinuous Bodies = Logical True
End

Solver 7
  Exec Solver = After timestep
  Equation = scalars
  Procedure = "SaveData" "SaveScalars"
  Filename = $ res_file_dat
End

Solver 8
  Exec Solver = Always
  Equation = FourierLoss
  Procedure = "FourierLoss" "FourierLossSolver"
  Target Variable = A

  Frequency = Real $ f

  Fourier Start Time = Real $ 0.10
  Fourier Integrate Cycles = Integer 8
  Separate Loss Components = Logical True

  Fourier Series Components = Integer 40
  Fourier Loss Filename = File $ res_file_fourierloss

  Harmonic Loss Frequency Exponent 1 = Real 1.0
  Harmonic Loss Frequency Exponent 2 = Real 2.0

  Harmonic Loss Field Exponent 1 = Real 2.0
  Harmonic Loss Field Exponent 2 = Real 2.0
End

!-------- Boundary conditions ---------
Boundary Condition 1
  Name = bcStOut
  A = Real 0
End

Boundary Condition 2
  Name = bcSt1
  Mortar BC = Integer 3
  Mortar BC Static = Logical True
  Anti Radial Projector = Logical True
  Galerkin Projector = Logical True
End

Boundary Condition 3
  Name = bcSt2
End

Boundary Condition 4
  Name = bcSlideSt
  Mortar BC = Integer 7
  Anti Rotational Projector = Logical True
  Galerkin Projector = Logical True
End

Boundary Condition 5
  Name = bcRt1
  Mortar BC = Integer 6
  Mortar BC Static = Logical True
  Anti Radial Projector = Logical True
  Galerkin Projector = Logical True
End

Boundary Condition 6
  Name =  bcRt2
End

Boundary Condition 7
  Name = bcSlideRt
End

